
class Guide {
    availabilityStatus {
        Available {
            assign(Assignment assignment, Integer demandWeeks) [remainingWeeks>demandWeeks] / {
                doAssign( assignment,  demandWeeks);
            } -> Available;
           assign(Assignment assignment, Integer demandWeeks) [demandWeeks == remainingWeeks]/ {
                doAssign( assignment,  demandWeeks);
            } -> Full;
        }
        Full {
            }
    }

    private void doAssign(Assignment assignment, Integer demandWeeks) {
        assignment.setGuide(this);
    	this.setRemainingWeeks(getRemainingWeeks()-demandWeeks);
    }

}

class Assignment  {
    Status {
      
        Assigned {
          pay(authorizationCode)[isValid(authorizationCode)] / {setCode(authorizationCode);} -> Paid;
          startTrip  -> Banned;
          cancel -> Cancelled;
        }
        Banned{
      }
      
        Paid {    
          cancel / {refund(50);} -> Cancelled;
           startTrip  -> Started;
        }
      Started{
        cancel / {refund(10);} -> Cancelled;
        finish -> Finished;
      }
      Finished{
        seasonEnd -> Final;
      }
      Cancelled{
        seasonEnd -> Final;
      }
    }

    private void refund(Integer percentage) {
        refundAmount = percentage;
    }
	
	public Integer getRefund() {
        return refundAmount;
    }

    private Boolean isValid(String code) {
    	return code!=null && !code.trim().equals("");
    }
    
    private void setCode(String code) {
    	paymentCode = code;
    }
}